// Definition for a binary tree node
class TreeNode {
  int val;
  TreeNode left;
  TreeNode right;

  TreeNode(int x) {
    val = x;
  }
}

class Solution {
  // Method to merge two binary trees
  public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
    // If either of the trees is null, return the non-null tree
    if (t1 == null) {
      return t2;
    }
    if (t2 == null) {
      return t1;
    }

    // Merge the values of the current nodes
    t1.val += t2.val;

    // Recursively merge the left children
    t1.left = mergeTrees(t1.left, t2.left);

    // Recursively merge the right children
    t1.right = mergeTrees(t1.right, t2.right);

    // Return the merged tree
    return t1;
  }

  public static void main(String[] args) {
    Solution solution = new Solution();

    // Example trees
    TreeNode t1 = new TreeNode(1);
    t1.left = new TreeNode(3);
    t1.right = new TreeNode(2);
    t1.left.left = new TreeNode(5);

    TreeNode t2 = new TreeNode(2);
    t2.left = new TreeNode(1);
    t2.right = new TreeNode(3);
    t2.left.right = new TreeNode(4);
    t2.right.right = new TreeNode(7);

    // Merge the trees
    TreeNode mergedTree = solution.mergeTrees(t1, t2);

    // Print the merged tree (in-order traversal)
    printInOrder(mergedTree);
  }

  // Helper method to print the tree in-order
  public static void printInOrder(TreeNode node) {
    if (node == null) {
      return;
    }
    printInOrder(node.left);
    System.out.print(node.val + " ");
    printInOrder(node.right);
  }
}
